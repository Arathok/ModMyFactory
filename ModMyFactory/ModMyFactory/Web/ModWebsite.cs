using System;
using System.Collections.Generic;
using System.IO;
using System.Security;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using ModMyFactory.Helpers;
using ModMyFactory.Models;
using ModMyFactory.Web.ModApi;

namespace ModMyFactory.Web
{
    /// <summary>
    /// Represents the mods.factorio.com website.
    /// </summary>
    static class ModWebsite
    {
        const string BaseUrl = "https://mods.factorio.com";
        const string ModsUrl =  BaseUrl + "/api/mods";

        /// <summary>
        /// Gets all mods that are available online.
        /// </summary>
        /// <returns>Returns a list of online available mods.</returns>
        public static async Task<List<ModInfo>> GetModsAsync(IProgress<Tuple<double, string>> progress, CancellationToken cancellationToken)
        {
            var result = new List<ModInfo>();

            string currentPageUrl = ModsUrl;
            while (!string.IsNullOrEmpty(currentPageUrl))
            {
                if (cancellationToken.IsCancellationRequested)
                    return null;

                ModInfo[] pageResult = await Task.Run<ModInfo[]>(() =>
                {
                    string document;
                    if (WebHelper.TryGetDocument(currentPageUrl, null, out document))
                    {
                        ApiPage currentPage = JsonHelper.Deserialize<ApiPage>(document);
                        int pageNumber = currentPage.Info.PageNumber;
                        int pageCount = currentPage.Info.PageCount;
                        progress.Report(new Tuple<double, string>((double)pageNumber / pageCount, $"Parsing page {pageNumber + 1} of {pageCount}."));

                        currentPageUrl = currentPage.Info.Links.NextPage;
                        return currentPage.Mods;
                    }

                    currentPageUrl = null;
                    return null;
                });
                
                if (pageResult != null)
                    result.AddRange(pageResult);
            }

            return result;
        }

        private static async Task<ExtendedModInfo> GetExtendedInfoAsyncInner(string name)
        {
            string modUrl = $"{ModsUrl}/{name}";

            ExtendedModInfo info = await Task.Run<ExtendedModInfo>(() =>
            {
                string document;
                if (WebHelper.TryGetDocument(modUrl, null, out document))
                {
                    ExtendedModInfo result = JsonHelper.Deserialize<ExtendedModInfo>(document);
                    return result;
                }

                return default(ExtendedModInfo);
            });

            return info;
        }

        /// <summary>
        /// Gets extended information about a specific mod.
        /// </summary>
        /// <param name="mod">The mod to get the extended information about.</param>
        /// <returns>Returns extended information about the specified mod.</returns>
        public static async Task<ExtendedModInfo> GetExtendedInfoAsync(ModInfo mod)
        {
            return await GetExtendedInfoAsyncInner(mod.Name);
        }

        /// <summary>
        /// Gets extended information about a specific mod.
        /// </summary>
        /// <param name="mod">The mod to get the extended information about.</param>
        /// <returns>Returns extended information about the specified mod.</returns>
        public static async Task<ExtendedModInfo> GetExtendedInfoAsync(Mod mod)
        {
            return await GetExtendedInfoAsyncInner(mod.Name);
        }

        /// <summary>
        /// Logs in at the website.
        /// </summary>
        /// <param name="username">The username.</param>
        /// <param name="password">The users password.</param>
        /// <param name="token">Out. The login token generated by the server.</param>
        /// <returns>Returns false if the login failed, otherwise true.</returns>
        public static bool LogIn(string username, SecureString password, out string token)
        {
            const string loginPage = "https://auth.factorio.com/api-login";
            const string pattern = "[0-9a-f]{30}";

            token = null;

            byte[] contentPart1 = Encoding.UTF8.GetBytes($"require_game_ownership=True&username={username}&password=");
            byte[] contentPart2 = SecureStringHelper.SecureStringToBytes(password);
            byte[] content = new byte[contentPart1.Length + contentPart2.Length];
            Array.Copy(contentPart1, 0, content, 0, contentPart1.Length);
            Array.Copy(contentPart2, 0, content, contentPart1.Length, contentPart2.Length);
            SecureStringHelper.DestroySecureByteArray(contentPart2);

            string document;
            if (!WebHelper.TryGetDocument(loginPage, null, content, out document)) return false;

            MatchCollection matches = Regex.Matches(document, pattern, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            if (matches.Count != 1) return false;
            token = matches[0].Value;
            return true;
        }

        /// <summary>
        /// Downloads a mod.
        /// </summary>
        /// <param name="release">The mods release to be downloaded.</param>
        /// <param name="username">The username.</param>
        /// <param name="token">The login token.</param>
        /// <param name="progress">A progress object used to report the progress of the operation.</param>
        /// <param name="cancellationToken">A cancelation token that can be used to cancel the operation.</param>
        /// <param name="parentCollection">The collection to contain the mods.</param>
        /// <param name="modpackCollection">The collection containing all modpacks.</param>
        /// <param name="messageOwner">The window that ownes the deletion message box.</param>
        public static async Task<Mod> DownloadReleaseAsync(ModRelease release, string username, string token, IProgress<double> progress, CancellationToken cancellationToken,
            ICollection<Mod> parentCollection, ICollection<Modpack> modpackCollection, Window messageOwner)
        {
            DirectoryInfo modDirectory = App.Instance.Settings.GetModDirectory(release.FactorioVersion);
            if (!modDirectory.Exists) modDirectory.Create();

            var downloadUrl = new Uri($"{BaseUrl}{release.DownloadUrl}?username={username}&token={token}");
            var modFile = new FileInfo(Path.Combine(modDirectory.FullName, release.FileName));

            await WebHelper.DownloadFileAsync(downloadUrl, null, modFile, progress, cancellationToken);
            string name = modFile.NameWithoutExtension().Split('_')[0];
            return new ZippedMod(name, release.FactorioVersion, modFile, parentCollection, modpackCollection, messageOwner);
        }

        /// <summary>
        /// Downloads a mod for updating.
        /// </summary>
        /// <param name="release">The mods release to be downloaded.</param>
        /// <param name="username">The username.</param>
        /// <param name="token">The login token.</param>
        /// <param name="progress">A progress object used to report the progress of the operation.</param>
        /// <param name="cancellationToken">A cancelation token that can be used to cancel the operation.</param>
        public static async Task<FileInfo> UpdateReleaseAsync(ModRelease release, string username, string token, IProgress<double> progress, CancellationToken cancellationToken)
        {
            DirectoryInfo modDirectory = App.Instance.Settings.GetModDirectory(release.FactorioVersion);
            if (!modDirectory.Exists) modDirectory.Create();

            var downloadUrl = new Uri($"{BaseUrl}{release.DownloadUrl}?username={username}&token={token}");
            var modFile = new FileInfo(Path.Combine(modDirectory.FullName, release.FileName));

            await WebHelper.DownloadFileAsync(downloadUrl, null, modFile, progress, cancellationToken);
            return modFile;
        }
    }
}
